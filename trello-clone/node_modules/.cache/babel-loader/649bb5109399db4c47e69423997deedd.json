{"ast":null,"code":"var _jsxFileName = \"/home/ana/Documents/learningReact/trelloClone/trello-clone/src/components/Board.js\",\n    _s = $RefreshSig$();\n\n// Create the Board component here\nimport React, { useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"; // Import the dataset\n\nimport dataset from \"./dataset\"; // Import redux functions and reducers\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAllTasks, setAllColumns, setColumnOrder, dragTasksSameColumn, dragTasksDifferentColumn, dragColumns } from \"./taskSlice\";\nimport Column from \"./Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  // It selects the task slice from the Redux store\n  const data = useSelector(state => state.task);\n  const dispatch = useDispatch();\n  /*\n  This function will update the Redux state based on \n  the new positions of the dragged tasks within a column and between different columns.\n  */\n\n  function onDragEnd(result) {\n    const {\n      destination,\n      source,\n      draggableId,\n      type\n    } = result; //If there is no destination present\n\n    if (!destination) {\n      return;\n    } //If columns are being dragged\n\n\n    if (type === \"column\") {\n      const colOrderNew = Array.from(data.columnOrder);\n      colOrderNew.splice(source.index, 1);\n      colOrderNew.splice(destination.index, 0, draggableId);\n      dispatch(dragColumns(colOrderNew));\n      return;\n    } //If the source and destination is the same\n\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const src = data.columns[source.droppableId];\n    const dst = data.columns[destination.droppableId]; // If a task is dropped inside the same column\n\n    if (src === dst) {\n      const newTaskIds = Array.from(src.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const updatedColumn = { ...src,\n        taskIds: newTaskIds\n      };\n      dispatch(dragTasksSameColumn(updatedColumn));\n      return;\n    } // If a task is dropped in a different column\n\n\n    const srcColId = src[\"id\"];\n    const srcTaskIds = Array.from(src.taskIds);\n    srcTaskIds.splice(source.index, 1);\n    const dstColId = dst[\"id\"];\n    const dstTaskIds = Array.from(dst.taskIds);\n    dstTaskIds.splice(destination.index, 0, draggableId);\n    dispatch(dragTasksDifferentColumn({\n      srcColId: srcColId,\n      srcTaskIds: srcTaskIds,\n      dstColId: dstColId,\n      dstTaskIds: dstTaskIds\n    }));\n  } //it initializes the Redux state by dispatching actions.\n\n\n  useEffect(() => {\n    console.log(\"oi\");\n    dispatch(setAllTasks({\n      tasks: dataset[\"tasks\"]\n    })); // Initialize the tasks object in redux initial state\n\n    dispatch(setAllColumns({\n      columns: dataset[\"columns\"]\n    })); // Initialize the columns object in redux initial state\n\n    dispatch(setColumnOrder({\n      columnOrder: dataset[\"columnOrder\"]\n    })); // Initialize the columns order in redux initial state\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        color: \"white\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tasks Mangement Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: {\n            display: \"flex\"\n          },\n          children: [data.columnOrder.map((colId, index) => {\n            // Replace this with the Column component later\n            return /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: colId\n            }, colId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 24\n            }, this);\n          }), provided.placeholder, /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `${JSON.stringify(data)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Board, \"baHjFRQWbTEQf9QRfrBhqxEE/Ug=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","DragDropContext","Droppable","dataset","useDispatch","useSelector","setAllTasks","setAllColumns","setColumnOrder","dragTasksSameColumn","dragTasksDifferentColumn","dragColumns","Column","Board","data","state","task","dispatch","onDragEnd","result","destination","source","draggableId","type","colOrderNew","Array","from","columnOrder","splice","index","droppableId","src","columns","dst","newTaskIds","taskIds","updatedColumn","srcColId","srcTaskIds","dstColId","dstTaskIds","console","log","tasks","textAlign","color","provided","droppableProps","innerRef","display","map","colId","placeholder","JSON","stringify"],"sources":["/home/ana/Documents/learningReact/trelloClone/trello-clone/src/components/Board.js"],"sourcesContent":["// Create the Board component here\nimport React, { useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\n// Import the dataset\nimport dataset from \"./dataset\";\n\n// Import redux functions and reducers\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setAllTasks,\n  setAllColumns,\n  setColumnOrder,\n  dragTasksSameColumn,\n  dragTasksDifferentColumn,\n  dragColumns,\n} from \"./taskSlice\";\n\nimport Column from \"./Column\";\n\nfunction Board() {\n  // It selects the task slice from the Redux store\n  const data = useSelector((state) => state.task);\n  const dispatch = useDispatch();\n\n  /*\n  This function will update the Redux state based on \n  the new positions of the dragged tasks within a column and between different columns.\n  */\n  function onDragEnd(result) {\n    const { destination, source, draggableId, type } = result;\n\n    //If there is no destination present\n    if (!destination) {\n      return;\n    }\n\n    //If columns are being dragged\n    if (type === \"column\") {\n      const colOrderNew = Array.from(data.columnOrder);\n      colOrderNew.splice(source.index, 1);\n      colOrderNew.splice(destination.index, 0, draggableId);\n\n      dispatch(dragColumns(colOrderNew));\n      return;\n    }\n\n    //If the source and destination is the same\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const src = data.columns[source.droppableId];\n    const dst = data.columns[destination.droppableId];\n\n    // If a task is dropped inside the same column\n    if (src === dst) {\n      const newTaskIds = Array.from(src.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...src,\n        taskIds: newTaskIds,\n      };\n\n      dispatch(dragTasksSameColumn(updatedColumn));\n      return;\n    }\n\n    // If a task is dropped in a different column\n    const srcColId = src[\"id\"];\n    const srcTaskIds = Array.from(src.taskIds);\n    srcTaskIds.splice(source.index, 1);\n\n    const dstColId = dst[\"id\"];\n    const dstTaskIds = Array.from(dst.taskIds);\n    dstTaskIds.splice(destination.index, 0, draggableId);\n\n    dispatch(\n      dragTasksDifferentColumn({\n        srcColId: srcColId,\n        srcTaskIds: srcTaskIds,\n        dstColId: dstColId,\n        dstTaskIds: dstTaskIds,\n      }),\n    );\n  }\n\n  //it initializes the Redux state by dispatching actions.\n  useEffect(() => {\n    console.log(\"oi\");\n    dispatch(setAllTasks({ tasks: dataset[\"tasks\"] })); // Initialize the tasks object in redux initial state\n    dispatch(setAllColumns({ columns: dataset[\"columns\"] })); // Initialize the columns object in redux initial state\n    dispatch(setColumnOrder({ columnOrder: dataset[\"columnOrder\"] })); // Initialize the columns order in redux initial state\n  }, [dispatch]);\n\n  return (\n    <>\n      <div style={{ textAlign: \"center\", color: \"white\" }}>\n        <h1>Tasks Mangement Board</h1>\n      </div>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {(provided) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={{ display: \"flex\" }}\n            >\n              {data.columnOrder.map((colId, index) => {\n                // Replace this with the Column component later\n                return <h1 key={colId}>{colId}</h1>;\n              })}\n              {provided.placeholder}\n              <p>{`${JSON.stringify(data)}`}</p>\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}