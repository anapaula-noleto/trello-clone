{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tasks: {},\n  columns: {},\n  columnOrder: [],\n  currTaskIdToEdit: \"\",\n  currColIdToEdit: \"\",\n  isDialogOpen: false\n}; // createSlice: A function that accepts an initial state, an object full of reducer functions, and a \"slice name\",\n// and automatically generates action creators and action types that correspond to the reducers and state.\n// actions: are payloads of information that describe changes to the application state.\n// reducers: A reducer is a pure function that specifies how the state of a slice should be updated in response to dispatched actions.\n// Reducers are functions that determine changes to an application's state. They can have any name, but they must return a new state immutably,\n// by taking the previous state and returning an updated state.\n// state: The state of a Redux slice represents the data associated with that particular slice.\n// It is managed by the generated reducer function and stored within the Redux store.\n\nexport const taskSlice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {\n    /* Default reducers start */\n    // Sets \"currTaskIdToEdit\" to the id of the current task being edited\n    setCurrTaskIdToEdit: (state, action) => {\n      state.currTaskIdToEdit = action.payload.taskId;\n    },\n    // Sets \"currColIdToEdit\" to the id of the current column in which the task is being edited\n    setCurrColIdToEdit: (state, action) => {\n      state.currColIdToEdit = action.payload.currTaskColId;\n    },\n    // Changes the state of the edit dialog box between open and close\n    setDialogStatus: (state, action) => {\n      state.isDialogOpen = action.payload;\n    },\n\n    /* Default reducers end */\n    // Add new reducers here\n    setAllTasks: (state, action) => {\n      state.tasks = action.payload.tasks;\n    },\n    setAllColumns: (state, action) => {\n      state.columns = action.payload.columns;\n    },\n    setColumnOrder: (state, action) => {\n      state.columnOrder = action.payload.columnOrder;\n    },\n    // reducer, dragColumns, that receives the new column order as payload.\n    dragColumns: (state, action) => {\n      state.columnOrder = action.payload;\n    },\n    // receives the data of the updated column as payload. It will update this column’s taskIds array with the rearranged task IDs.\n    dragTasksSameColumn: (state, action) => {\n      const colId = action.payload.id;\n      const taskIds = action.payload.taskIds;\n      state.columns[colId].taskIds = taskIds;\n    },\n    dragTasksDifferentColumn: (state, action) => {\n      let {\n        srcColId,\n        srcTaskIds,\n        dstColId,\n        dstTaskIds\n      } = action.payload;\n      state.columns[srcColId].taskIds = srcTaskIds;\n      state.columns[dstColId].taskIds = dstTaskIds;\n    },\n    addNewTask: (state, action) => {\n      const {\n        columnId,\n        taskTitle,\n        taskDescription\n      } = action.payload;\n      const taskId = `task-${Math.random().toString(36).substr(2, 9)}}`;\n      state.tasks[taskId] = {\n        id: taskId,\n        taskTitle: taskTitle,\n        taskDescription: taskDescription\n      };\n    }\n  }\n});\nexport const {\n  setAllColumns,\n  setAllTasks,\n  setColumnOrder,\n  setCurrColIdToEdit,\n  setCurrTaskIdToEdit,\n  setDialogStatus,\n  dragColumns,\n  dragTasksSameColumn,\n  dragTasksDifferentColumn\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","columns","columnOrder","currTaskIdToEdit","currColIdToEdit","isDialogOpen","taskSlice","name","reducers","setCurrTaskIdToEdit","state","action","payload","taskId","setCurrColIdToEdit","currTaskColId","setDialogStatus","setAllTasks","setAllColumns","setColumnOrder","dragColumns","dragTasksSameColumn","colId","id","taskIds","dragTasksDifferentColumn","srcColId","srcTaskIds","dstColId","dstTaskIds","addNewTask","columnId","taskTitle","taskDescription","Math","random","toString","substr","actions","reducer"],"sources":["/home/ana/Documents/learningReact/trelloClone/trello-clone/src/components/taskSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  tasks: {},\n  columns: {},\n  columnOrder: [],\n  currTaskIdToEdit: \"\",\n  currColIdToEdit: \"\",\n  isDialogOpen: false,\n};\n\n// createSlice: A function that accepts an initial state, an object full of reducer functions, and a \"slice name\",\n// and automatically generates action creators and action types that correspond to the reducers and state.\n// actions: are payloads of information that describe changes to the application state.\n// reducers: A reducer is a pure function that specifies how the state of a slice should be updated in response to dispatched actions.\n// Reducers are functions that determine changes to an application's state. They can have any name, but they must return a new state immutably,\n// by taking the previous state and returning an updated state.\n// state: The state of a Redux slice represents the data associated with that particular slice.\n// It is managed by the generated reducer function and stored within the Redux store.\n\nexport const taskSlice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {\n    /* Default reducers start */\n    // Sets \"currTaskIdToEdit\" to the id of the current task being edited\n    setCurrTaskIdToEdit: (state, action) => {\n      state.currTaskIdToEdit = action.payload.taskId;\n    },\n    // Sets \"currColIdToEdit\" to the id of the current column in which the task is being edited\n    setCurrColIdToEdit: (state, action) => {\n      state.currColIdToEdit = action.payload.currTaskColId;\n    },\n    // Changes the state of the edit dialog box between open and close\n    setDialogStatus: (state, action) => {\n      state.isDialogOpen = action.payload;\n    },\n    /* Default reducers end */\n\n    // Add new reducers here\n    setAllTasks: (state, action) => {\n      state.tasks = action.payload.tasks;\n    },\n\n    setAllColumns: (state, action) => {\n      state.columns = action.payload.columns;\n    },\n\n    setColumnOrder: (state, action) => {\n      state.columnOrder = action.payload.columnOrder;\n    },\n\n    // reducer, dragColumns, that receives the new column order as payload.\n    dragColumns: (state, action) => {\n      state.columnOrder = action.payload;\n    },\n\n    // receives the data of the updated column as payload. It will update this column’s taskIds array with the rearranged task IDs.\n    dragTasksSameColumn: (state, action) => {\n      const colId = action.payload.id;\n      const taskIds = action.payload.taskIds;\n\n      state.columns[colId].taskIds = taskIds;\n    },\n\n    dragTasksDifferentColumn: (state, action) => {\n      let { srcColId, srcTaskIds, dstColId, dstTaskIds } = action.payload;\n\n      state.columns[srcColId].taskIds = srcTaskIds;\n      state.columns[dstColId].taskIds = dstTaskIds;\n    },\n\n    addNewTask: (state, action) => {\n      const { columnId, taskTitle, taskDescription } = action.payload;\n      const taskId = `task-${Math.random().toString(36).substr(2, 9)}}`;\n\n      state.tasks[taskId] = {\n        id: taskId,\n        taskTitle: taskTitle,\n        taskDescription: taskDescription,\n      };\n    },\n  },\n});\n\nexport const {\n  setAllColumns,\n  setAllTasks,\n  setColumnOrder,\n  setCurrColIdToEdit,\n  setCurrTaskIdToEdit,\n  setDialogStatus,\n  dragColumns,\n  dragTasksSameColumn,\n  dragTasksDifferentColumn,\n} = taskSlice.actions;\n\nexport default taskSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}